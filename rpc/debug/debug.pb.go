// Code generated by protoc-gen-go. DO NOT EDIT.
// source: debug/debug.proto

package debug

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The top-level message sent by the client for the `StreamingOpen` method.
// Multiple `StreamingOpenReq` messages can be sent but the first message
// must contain a `debug_config` message to initialize the debug session.
// All subsequent messages must contain bytes to be sent to the debug session
// and must not contain a `session_config` message.
type StreamingOpenReq struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamingOpenReq) Reset()         { *m = StreamingOpenReq{} }
func (m *StreamingOpenReq) String() string { return proto.CompactTextString(m) }
func (*StreamingOpenReq) ProtoMessage()    {}
func (*StreamingOpenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae24eab94cb53d5, []int{0}
}

func (m *StreamingOpenReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamingOpenReq.Unmarshal(m, b)
}
func (m *StreamingOpenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamingOpenReq.Marshal(b, m, deterministic)
}
func (m *StreamingOpenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamingOpenReq.Merge(m, src)
}
func (m *StreamingOpenReq) XXX_Size() int {
	return xxx_messageInfo_StreamingOpenReq.Size(m)
}
func (m *StreamingOpenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamingOpenReq.DiscardUnknown(m)
}

var xxx_messageInfo_StreamingOpenReq proto.InternalMessageInfo

func (m *StreamingOpenReq) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// Tells the session which target to open and provides additional parameters
// that might be needed to configure the target or the monitor itself.
type DebugConfig struct {
	Instance             *Instance `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *DebugConfig) Reset()         { *m = DebugConfig{} }
func (m *DebugConfig) String() string { return proto.CompactTextString(m) }
func (*DebugConfig) ProtoMessage()    {}
func (*DebugConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae24eab94cb53d5, []int{1}
}

func (m *DebugConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_DebugConfig.Unmarshal(m, b)
}
func (m *DebugConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_DebugConfig.Marshal(b, m, deterministic)
}
func (m *DebugConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DebugConfig.Merge(m, src)
}
func (m *DebugConfig) XXX_Size() int {
	return xxx_messageInfo_DebugConfig.Size(m)
}
func (m *DebugConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_DebugConfig.DiscardUnknown(m)
}

var xxx_messageInfo_DebugConfig proto.InternalMessageInfo

func (m *DebugConfig) GetInstance() *Instance {
	if m != nil {
		return m.Instance
	}
	return nil
}

//
type StreamingOpenResp struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamingOpenResp) Reset()         { *m = StreamingOpenResp{} }
func (m *StreamingOpenResp) String() string { return proto.CompactTextString(m) }
func (*StreamingOpenResp) ProtoMessage()    {}
func (*StreamingOpenResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae24eab94cb53d5, []int{2}
}

func (m *StreamingOpenResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamingOpenResp.Unmarshal(m, b)
}
func (m *StreamingOpenResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamingOpenResp.Marshal(b, m, deterministic)
}
func (m *StreamingOpenResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamingOpenResp.Merge(m, src)
}
func (m *StreamingOpenResp) XXX_Size() int {
	return xxx_messageInfo_StreamingOpenResp.Size(m)
}
func (m *StreamingOpenResp) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamingOpenResp.DiscardUnknown(m)
}

var xxx_messageInfo_StreamingOpenResp proto.InternalMessageInfo

func (m *StreamingOpenResp) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// TODO duplicated from rpc/commands/common.proto
type Instance struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Instance) Reset()         { *m = Instance{} }
func (m *Instance) String() string { return proto.CompactTextString(m) }
func (*Instance) ProtoMessage()    {}
func (*Instance) Descriptor() ([]byte, []int) {
	return fileDescriptor_5ae24eab94cb53d5, []int{3}
}

func (m *Instance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Instance.Unmarshal(m, b)
}
func (m *Instance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Instance.Marshal(b, m, deterministic)
}
func (m *Instance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instance.Merge(m, src)
}
func (m *Instance) XXX_Size() int {
	return xxx_messageInfo_Instance.Size(m)
}
func (m *Instance) XXX_DiscardUnknown() {
	xxx_messageInfo_Instance.DiscardUnknown(m)
}

var xxx_messageInfo_Instance proto.InternalMessageInfo

func (m *Instance) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*StreamingOpenReq)(nil), "cc.arduino.cli.debug.StreamingOpenReq")
	proto.RegisterType((*DebugConfig)(nil), "cc.arduino.cli.debug.DebugConfig")
	proto.RegisterType((*StreamingOpenResp)(nil), "cc.arduino.cli.debug.StreamingOpenResp")
	proto.RegisterType((*Instance)(nil), "cc.arduino.cli.debug.Instance")
}

func init() { proto.RegisterFile("debug/debug.proto", fileDescriptor_5ae24eab94cb53d5) }

var fileDescriptor_5ae24eab94cb53d5 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x4c, 0x49, 0x4d, 0x2a,
	0x4d, 0xd7, 0x07, 0x93, 0x7a, 0x05, 0x45, 0xf9, 0x25, 0xf9, 0x42, 0x22, 0xc9, 0xc9, 0x7a, 0x89,
	0x45, 0x29, 0xa5, 0x99, 0x79, 0xf9, 0x7a, 0xc9, 0x39, 0x99, 0x7a, 0x60, 0x39, 0x25, 0x35, 0x2e,
	0x81, 0xe0, 0x92, 0xa2, 0xd4, 0xc4, 0xdc, 0xcc, 0xbc, 0x74, 0xff, 0x82, 0xd4, 0xbc, 0xa0, 0xd4,
	0x42, 0x21, 0x21, 0x2e, 0x96, 0x94, 0xc4, 0x92, 0x44, 0x09, 0x46, 0x05, 0x46, 0x0d, 0x9e, 0x20,
	0x30, 0x5b, 0xc9, 0x93, 0x8b, 0xdb, 0x05, 0xa4, 0xc1, 0x39, 0x3f, 0x2f, 0x2d, 0x33, 0x5d, 0xc8,
	0x8a, 0x8b, 0x23, 0x33, 0xaf, 0xb8, 0x24, 0x31, 0x2f, 0x39, 0x15, 0xac, 0x8c, 0xdb, 0x48, 0x4e,
	0x0f, 0x9b, 0xf9, 0x7a, 0x9e, 0x50, 0x55, 0x41, 0x70, 0xf5, 0x4a, 0xea, 0x5c, 0x82, 0x68, 0x56,
	0x16, 0x17, 0x60, 0xb5, 0x53, 0x8a, 0x8b, 0x03, 0xa6, 0x5d, 0x88, 0x8f, 0x8b, 0x29, 0x33, 0x05,
	0x2c, 0xcb, 0x1a, 0xc4, 0x94, 0x99, 0x62, 0x94, 0xcf, 0xc5, 0x0a, 0x76, 0x8f, 0x50, 0x1a, 0x17,
	0x2f, 0x8a, 0x69, 0x42, 0x6a, 0xd8, 0x1d, 0x82, 0xee, 0x4b, 0x29, 0x75, 0xa2, 0xd4, 0x15, 0x17,
	0x28, 0x31, 0x68, 0x30, 0x1a, 0x30, 0x3a, 0x69, 0x45, 0x69, 0xa4, 0x67, 0x96, 0x64, 0x94, 0x26,
	0xe9, 0x25, 0xe7, 0xe7, 0xea, 0x43, 0xf5, 0xc1, 0x68, 0xdd, 0xe4, 0x9c, 0x4c, 0xfd, 0xa2, 0x82,
	0x64, 0x48, 0x80, 0x27, 0xb1, 0x81, 0x43, 0xdc, 0x18, 0x10, 0x00, 0x00, 0xff, 0xff, 0x1d, 0xb9,
	0xe0, 0xf3, 0x86, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// DebugClient is the client API for Debug service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type DebugClient interface {
	StreamingOpen(ctx context.Context, opts ...grpc.CallOption) (Debug_StreamingOpenClient, error)
}

type debugClient struct {
	cc *grpc.ClientConn
}

func NewDebugClient(cc *grpc.ClientConn) DebugClient {
	return &debugClient{cc}
}

func (c *debugClient) StreamingOpen(ctx context.Context, opts ...grpc.CallOption) (Debug_StreamingOpenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Debug_serviceDesc.Streams[0], "/cc.arduino.cli.debug.Debug/StreamingOpen", opts...)
	if err != nil {
		return nil, err
	}
	x := &debugStreamingOpenClient{stream}
	return x, nil
}

type Debug_StreamingOpenClient interface {
	Send(*StreamingOpenReq) error
	Recv() (*StreamingOpenResp, error)
	grpc.ClientStream
}

type debugStreamingOpenClient struct {
	grpc.ClientStream
}

func (x *debugStreamingOpenClient) Send(m *StreamingOpenReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *debugStreamingOpenClient) Recv() (*StreamingOpenResp, error) {
	m := new(StreamingOpenResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// DebugServer is the server API for Debug service.
type DebugServer interface {
	StreamingOpen(Debug_StreamingOpenServer) error
}

func RegisterDebugServer(s *grpc.Server, srv DebugServer) {
	s.RegisterService(&_Debug_serviceDesc, srv)
}

func _Debug_StreamingOpen_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DebugServer).StreamingOpen(&debugStreamingOpenServer{stream})
}

type Debug_StreamingOpenServer interface {
	Send(*StreamingOpenResp) error
	Recv() (*StreamingOpenReq, error)
	grpc.ServerStream
}

type debugStreamingOpenServer struct {
	grpc.ServerStream
}

func (x *debugStreamingOpenServer) Send(m *StreamingOpenResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *debugStreamingOpenServer) Recv() (*StreamingOpenReq, error) {
	m := new(StreamingOpenReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Debug_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cc.arduino.cli.debug.Debug",
	HandlerType: (*DebugServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingOpen",
			Handler:       _Debug_StreamingOpen_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "debug/debug.proto",
}
