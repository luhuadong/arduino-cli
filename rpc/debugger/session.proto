// This file is part of arduino-cli.
//
// Copyright 2020 ARDUINO SA (http://www.arduino.cc/)
//
// This software is released under the GNU General Public License version 3,
// which covers the main part of arduino-cli.
// The terms of this license can be found at:
// https://www.gnu.org/licenses/gpl-3.0.en.html
//
// You can be released from the requirements of the above licenses by purchasing
// a commercial license. Buying such a license is mandatory if you want to
// modify or otherwise use the software for commercial activities involving the
// Arduino software without disclosing the source code of your own applications.
// To purchase a commercial license, send an email to license@arduino.cc.

syntax = "proto3";

package cc.arduino.cli.debugger;

option go_package = "github.com/arduino/arduino-cli/rpc/debugger";

// Service that abstract a debugger Session usage
service Session {
    rpc StreamingOpen (stream StreamingOpenReq) returns (stream StreamingOpenResp) {
    }
}

// The top-level message sent by the client for the `StreamingOpen` method.
// Multiple `StreamingOpenReq` messages can be sent but the first message
// must contain a `session_config` message to initialize the debug session.
// All subsequent messages must contain bytes to be sent to the debugger session
// and must not contain a `session_config` message.
message StreamingOpenReq {
    // Content must be either a debug session config or data to be sent.
    oneof content {
        // Provides information to the debugger that specifies which is the target.
        // The first `StreamingOpenReq` message must contain a `session_config`
        // message.
        SessionConfig sessionConfig = 1;

        // The data to be sent to the target being monitored.
        bytes data = 2;
    }
}

// Tells the session which target to open and provides additional parameters
// that might be needed to configure the target or the monitor itself.
message SessionConfig {
    Instance instance = 1;
    string fqbn = 2; // Fully Qualified Board Name, e.g.: arduino:avr:uno.
    string sketchPath = 3;
    string buildCachePath = 4; // Builds of 'core.a' are saved into this path to be cached and reused.
    string buildPath = 5; // Path where to save compiled files.
    repeated string buildProperties = 6; // List of custom build properties separated by commas. Or can be used multiple times for multiple properties.
    string warnings = 7; // Used to tell gcc which warning level to use.
    bool verbose = 8; // Turns on verbose mode.
    bool quiet = 9; // Suppresses almost every output.
    string vidPid = 10; // VID/PID specific build properties.
    string exportFile = 11; // The compiled binary is written to this file
    int32 jobs = 12; // The max number of concurrent compiler instances to run (as make -jx)
    repeated string libraries = 13; // List of custom libraries paths separated by commas. Or can be used multiple times for multiple libraries paths.
}

//
message StreamingOpenResp {
    bytes data = 1;
}

// TODO duplicated from rpc/commands/common.proto
message Instance { int32 id = 1; }
