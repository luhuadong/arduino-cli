// Code generated by protoc-gen-go. DO NOT EDIT.
// source: debugger/session.proto

package debugger

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// The top-level message sent by the client for the `StreamingOpen` method.
// Multiple `StreamingOpenReq` messages can be sent but the first message
// must contain a `session_config` message to initialize the debug session.
// All subsequent messages must contain bytes to be sent to the debugger session
// and must not contain a `session_config` message.
type StreamingOpenReq struct {
	// Content must be either a debug session config or data to be sent.
	//
	// Types that are valid to be assigned to Content:
	//	*StreamingOpenReq_SessionConfig
	//	*StreamingOpenReq_Data
	Content              isStreamingOpenReq_Content `protobuf_oneof:"content"`
	XXX_NoUnkeyedLiteral struct{}                   `json:"-"`
	XXX_unrecognized     []byte                     `json:"-"`
	XXX_sizecache        int32                      `json:"-"`
}

func (m *StreamingOpenReq) Reset()         { *m = StreamingOpenReq{} }
func (m *StreamingOpenReq) String() string { return proto.CompactTextString(m) }
func (*StreamingOpenReq) ProtoMessage()    {}
func (*StreamingOpenReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fbb8a8e78eac33, []int{0}
}

func (m *StreamingOpenReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamingOpenReq.Unmarshal(m, b)
}
func (m *StreamingOpenReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamingOpenReq.Marshal(b, m, deterministic)
}
func (m *StreamingOpenReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamingOpenReq.Merge(m, src)
}
func (m *StreamingOpenReq) XXX_Size() int {
	return xxx_messageInfo_StreamingOpenReq.Size(m)
}
func (m *StreamingOpenReq) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamingOpenReq.DiscardUnknown(m)
}

var xxx_messageInfo_StreamingOpenReq proto.InternalMessageInfo

type isStreamingOpenReq_Content interface {
	isStreamingOpenReq_Content()
}

type StreamingOpenReq_SessionConfig struct {
	SessionConfig *SessionConfig `protobuf:"bytes,1,opt,name=sessionConfig,proto3,oneof"`
}

type StreamingOpenReq_Data struct {
	Data []byte `protobuf:"bytes,2,opt,name=data,proto3,oneof"`
}

func (*StreamingOpenReq_SessionConfig) isStreamingOpenReq_Content() {}

func (*StreamingOpenReq_Data) isStreamingOpenReq_Content() {}

func (m *StreamingOpenReq) GetContent() isStreamingOpenReq_Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func (m *StreamingOpenReq) GetSessionConfig() *SessionConfig {
	if x, ok := m.GetContent().(*StreamingOpenReq_SessionConfig); ok {
		return x.SessionConfig
	}
	return nil
}

func (m *StreamingOpenReq) GetData() []byte {
	if x, ok := m.GetContent().(*StreamingOpenReq_Data); ok {
		return x.Data
	}
	return nil
}

// XXX_OneofWrappers is for the internal use of the proto package.
func (*StreamingOpenReq) XXX_OneofWrappers() []interface{} {
	return []interface{}{
		(*StreamingOpenReq_SessionConfig)(nil),
		(*StreamingOpenReq_Data)(nil),
	}
}

// Tells the session which target to open and provides additional parameters
// that might be needed to configure the target or the monitor itself.
type SessionConfig struct {
	Instance             *Instance `protobuf:"bytes,1,opt,name=instance,proto3" json:"instance,omitempty"`
	Fqbn                 string    `protobuf:"bytes,2,opt,name=fqbn,proto3" json:"fqbn,omitempty"`
	SketchPath           string    `protobuf:"bytes,3,opt,name=sketchPath,proto3" json:"sketchPath,omitempty"`
	BuildCachePath       string    `protobuf:"bytes,4,opt,name=buildCachePath,proto3" json:"buildCachePath,omitempty"`
	BuildPath            string    `protobuf:"bytes,5,opt,name=buildPath,proto3" json:"buildPath,omitempty"`
	BuildProperties      []string  `protobuf:"bytes,6,rep,name=buildProperties,proto3" json:"buildProperties,omitempty"`
	Warnings             string    `protobuf:"bytes,7,opt,name=warnings,proto3" json:"warnings,omitempty"`
	Verbose              bool      `protobuf:"varint,8,opt,name=verbose,proto3" json:"verbose,omitempty"`
	Quiet                bool      `protobuf:"varint,9,opt,name=quiet,proto3" json:"quiet,omitempty"`
	VidPid               string    `protobuf:"bytes,10,opt,name=vidPid,proto3" json:"vidPid,omitempty"`
	ExportFile           string    `protobuf:"bytes,11,opt,name=exportFile,proto3" json:"exportFile,omitempty"`
	Jobs                 int32     `protobuf:"varint,12,opt,name=jobs,proto3" json:"jobs,omitempty"`
	Libraries            []string  `protobuf:"bytes,13,rep,name=libraries,proto3" json:"libraries,omitempty"`
	XXX_NoUnkeyedLiteral struct{}  `json:"-"`
	XXX_unrecognized     []byte    `json:"-"`
	XXX_sizecache        int32     `json:"-"`
}

func (m *SessionConfig) Reset()         { *m = SessionConfig{} }
func (m *SessionConfig) String() string { return proto.CompactTextString(m) }
func (*SessionConfig) ProtoMessage()    {}
func (*SessionConfig) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fbb8a8e78eac33, []int{1}
}

func (m *SessionConfig) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SessionConfig.Unmarshal(m, b)
}
func (m *SessionConfig) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SessionConfig.Marshal(b, m, deterministic)
}
func (m *SessionConfig) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SessionConfig.Merge(m, src)
}
func (m *SessionConfig) XXX_Size() int {
	return xxx_messageInfo_SessionConfig.Size(m)
}
func (m *SessionConfig) XXX_DiscardUnknown() {
	xxx_messageInfo_SessionConfig.DiscardUnknown(m)
}

var xxx_messageInfo_SessionConfig proto.InternalMessageInfo

func (m *SessionConfig) GetInstance() *Instance {
	if m != nil {
		return m.Instance
	}
	return nil
}

func (m *SessionConfig) GetFqbn() string {
	if m != nil {
		return m.Fqbn
	}
	return ""
}

func (m *SessionConfig) GetSketchPath() string {
	if m != nil {
		return m.SketchPath
	}
	return ""
}

func (m *SessionConfig) GetBuildCachePath() string {
	if m != nil {
		return m.BuildCachePath
	}
	return ""
}

func (m *SessionConfig) GetBuildPath() string {
	if m != nil {
		return m.BuildPath
	}
	return ""
}

func (m *SessionConfig) GetBuildProperties() []string {
	if m != nil {
		return m.BuildProperties
	}
	return nil
}

func (m *SessionConfig) GetWarnings() string {
	if m != nil {
		return m.Warnings
	}
	return ""
}

func (m *SessionConfig) GetVerbose() bool {
	if m != nil {
		return m.Verbose
	}
	return false
}

func (m *SessionConfig) GetQuiet() bool {
	if m != nil {
		return m.Quiet
	}
	return false
}

func (m *SessionConfig) GetVidPid() string {
	if m != nil {
		return m.VidPid
	}
	return ""
}

func (m *SessionConfig) GetExportFile() string {
	if m != nil {
		return m.ExportFile
	}
	return ""
}

func (m *SessionConfig) GetJobs() int32 {
	if m != nil {
		return m.Jobs
	}
	return 0
}

func (m *SessionConfig) GetLibraries() []string {
	if m != nil {
		return m.Libraries
	}
	return nil
}

//
type StreamingOpenResp struct {
	Data                 []byte   `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamingOpenResp) Reset()         { *m = StreamingOpenResp{} }
func (m *StreamingOpenResp) String() string { return proto.CompactTextString(m) }
func (*StreamingOpenResp) ProtoMessage()    {}
func (*StreamingOpenResp) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fbb8a8e78eac33, []int{2}
}

func (m *StreamingOpenResp) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamingOpenResp.Unmarshal(m, b)
}
func (m *StreamingOpenResp) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamingOpenResp.Marshal(b, m, deterministic)
}
func (m *StreamingOpenResp) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamingOpenResp.Merge(m, src)
}
func (m *StreamingOpenResp) XXX_Size() int {
	return xxx_messageInfo_StreamingOpenResp.Size(m)
}
func (m *StreamingOpenResp) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamingOpenResp.DiscardUnknown(m)
}

var xxx_messageInfo_StreamingOpenResp proto.InternalMessageInfo

func (m *StreamingOpenResp) GetData() []byte {
	if m != nil {
		return m.Data
	}
	return nil
}

// TODO duplicated from rpc/commands/common.proto
type Instance struct {
	Id                   int32    `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Instance) Reset()         { *m = Instance{} }
func (m *Instance) String() string { return proto.CompactTextString(m) }
func (*Instance) ProtoMessage()    {}
func (*Instance) Descriptor() ([]byte, []int) {
	return fileDescriptor_e7fbb8a8e78eac33, []int{3}
}

func (m *Instance) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Instance.Unmarshal(m, b)
}
func (m *Instance) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Instance.Marshal(b, m, deterministic)
}
func (m *Instance) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Instance.Merge(m, src)
}
func (m *Instance) XXX_Size() int {
	return xxx_messageInfo_Instance.Size(m)
}
func (m *Instance) XXX_DiscardUnknown() {
	xxx_messageInfo_Instance.DiscardUnknown(m)
}

var xxx_messageInfo_Instance proto.InternalMessageInfo

func (m *Instance) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func init() {
	proto.RegisterType((*StreamingOpenReq)(nil), "cc.arduino.cli.debugger.StreamingOpenReq")
	proto.RegisterType((*SessionConfig)(nil), "cc.arduino.cli.debugger.SessionConfig")
	proto.RegisterType((*StreamingOpenResp)(nil), "cc.arduino.cli.debugger.StreamingOpenResp")
	proto.RegisterType((*Instance)(nil), "cc.arduino.cli.debugger.Instance")
}

func init() { proto.RegisterFile("debugger/session.proto", fileDescriptor_e7fbb8a8e78eac33) }

var fileDescriptor_e7fbb8a8e78eac33 = []byte{
	// 452 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x53, 0x4d, 0x6f, 0xd4, 0x30,
	0x10, 0xdd, 0xec, 0x67, 0x32, 0xdd, 0x2d, 0x60, 0x55, 0xc5, 0x5a, 0x21, 0x14, 0x72, 0x28, 0x01,
	0xd4, 0x2c, 0x2a, 0x67, 0x2e, 0xad, 0x84, 0xca, 0x05, 0xaa, 0xf4, 0xc6, 0xcd, 0x71, 0xdc, 0xec,
	0x40, 0x6a, 0x67, 0x6d, 0xa7, 0xe5, 0xce, 0x9f, 0xe1, 0x67, 0xa2, 0x78, 0x93, 0xee, 0x87, 0xb4,
	0x12, 0xa7, 0xf5, 0x7b, 0x7e, 0xf3, 0xc6, 0xb3, 0x6f, 0x02, 0xa7, 0xb9, 0xc8, 0xea, 0xa2, 0x10,
	0x7a, 0x61, 0x84, 0x31, 0xa8, 0x64, 0x52, 0x69, 0x65, 0x15, 0x79, 0xc9, 0x79, 0xc2, 0x74, 0x5e,
	0xa3, 0x54, 0x09, 0x2f, 0x31, 0xe9, 0x64, 0xd1, 0x1f, 0x0f, 0x9e, 0xdf, 0x5a, 0x2d, 0xd8, 0x3d,
	0xca, 0xe2, 0x7b, 0x25, 0x64, 0x2a, 0x56, 0xe4, 0x1b, 0xcc, 0xda, 0xf2, 0x2b, 0x25, 0xef, 0xb0,
	0xa0, 0x5e, 0xe8, 0xc5, 0x47, 0x17, 0x67, 0xc9, 0x01, 0x97, 0xe4, 0x76, 0x5b, 0x7d, 0xdd, 0x4b,
	0x77, 0xcb, 0xc9, 0x09, 0x0c, 0x73, 0x66, 0x19, 0xed, 0x87, 0x5e, 0x3c, 0xbd, 0xee, 0xa5, 0x0e,
	0x5d, 0x06, 0x30, 0xe1, 0x4a, 0x5a, 0x21, 0x6d, 0xf4, 0x77, 0x00, 0xb3, 0x1d, 0x0f, 0xf2, 0x19,
	0x7c, 0x94, 0xc6, 0x32, 0xc9, 0x45, 0xdb, 0xfd, 0xcd, 0xc1, 0xee, 0x5f, 0x5b, 0x61, 0xfa, 0x54,
	0x42, 0x08, 0x0c, 0xef, 0x56, 0x99, 0x74, 0x1d, 0x83, 0xd4, 0x9d, 0xc9, 0x6b, 0x00, 0xf3, 0x4b,
	0x58, 0xbe, 0xbc, 0x61, 0x76, 0x49, 0x07, 0xee, 0x66, 0x8b, 0x21, 0x67, 0x70, 0x9c, 0xd5, 0x58,
	0xe6, 0x57, 0x8c, 0x2f, 0x85, 0xd3, 0x0c, 0x9d, 0x66, 0x8f, 0x25, 0xaf, 0x20, 0x70, 0x8c, 0x93,
	0x8c, 0x9c, 0x64, 0x43, 0x90, 0x18, 0x9e, 0xad, 0x81, 0x56, 0x95, 0xd0, 0x16, 0x85, 0xa1, 0xe3,
	0x70, 0x10, 0x07, 0xe9, 0x3e, 0x4d, 0xe6, 0xe0, 0x3f, 0x32, 0x2d, 0x51, 0x16, 0x86, 0x4e, 0x9c,
	0xcd, 0x13, 0x26, 0x14, 0x26, 0x0f, 0x42, 0x67, 0xca, 0x08, 0xea, 0x87, 0x5e, 0xec, 0xa7, 0x1d,
	0x24, 0x27, 0x30, 0x5a, 0xd5, 0x28, 0x2c, 0x0d, 0x1c, 0xbf, 0x06, 0xe4, 0x14, 0xc6, 0x0f, 0x98,
	0xdf, 0x60, 0x4e, 0xc1, 0x39, 0xb5, 0xa8, 0x99, 0x59, 0xfc, 0xae, 0x94, 0xb6, 0x5f, 0xb0, 0x14,
	0xf4, 0x68, 0x3d, 0xf3, 0x86, 0x69, 0xfe, 0xa7, 0x9f, 0x2a, 0x33, 0x74, 0x1a, 0x7a, 0xf1, 0x28,
	0x75, 0xe7, 0x66, 0xbe, 0x12, 0x33, 0xcd, 0x74, 0xf3, 0xf6, 0x99, 0x7b, 0xfb, 0x86, 0x88, 0xde,
	0xc2, 0x8b, 0xbd, 0x7d, 0x31, 0x55, 0x63, 0xe3, 0x02, 0x6e, 0x92, 0x9a, 0xae, 0xe3, 0x8d, 0xe6,
	0xe0, 0x77, 0xc1, 0x90, 0x63, 0xe8, 0x63, 0xee, 0x6e, 0x47, 0x69, 0x1f, 0xf3, 0x8b, 0x47, 0x98,
	0xb4, 0x71, 0x93, 0x12, 0x66, 0x3b, 0x7e, 0xe4, 0xdd, 0xe1, 0x2d, 0xdb, 0xdb, 0xd3, 0xf9, 0xfb,
	0xff, 0x95, 0x9a, 0x2a, 0xea, 0xc5, 0xde, 0x47, 0xef, 0xf2, 0xfc, 0xc7, 0x87, 0x02, 0xed, 0xb2,
	0xce, 0x12, 0xae, 0xee, 0x17, 0x6d, 0x69, 0xf7, 0x7b, 0xce, 0x4b, 0x5c, 0xe8, 0x8a, 0x2f, 0x3a,
	0x9b, 0x6c, 0xec, 0xbe, 0x9e, 0x4f, 0xff, 0x02, 0x00, 0x00, 0xff, 0xff, 0xa0, 0xf3, 0x3f, 0xd1,
	0x57, 0x03, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SessionClient is the client API for Session service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SessionClient interface {
	StreamingOpen(ctx context.Context, opts ...grpc.CallOption) (Session_StreamingOpenClient, error)
}

type sessionClient struct {
	cc *grpc.ClientConn
}

func NewSessionClient(cc *grpc.ClientConn) SessionClient {
	return &sessionClient{cc}
}

func (c *sessionClient) StreamingOpen(ctx context.Context, opts ...grpc.CallOption) (Session_StreamingOpenClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Session_serviceDesc.Streams[0], "/cc.arduino.cli.debugger.Session/StreamingOpen", opts...)
	if err != nil {
		return nil, err
	}
	x := &sessionStreamingOpenClient{stream}
	return x, nil
}

type Session_StreamingOpenClient interface {
	Send(*StreamingOpenReq) error
	Recv() (*StreamingOpenResp, error)
	grpc.ClientStream
}

type sessionStreamingOpenClient struct {
	grpc.ClientStream
}

func (x *sessionStreamingOpenClient) Send(m *StreamingOpenReq) error {
	return x.ClientStream.SendMsg(m)
}

func (x *sessionStreamingOpenClient) Recv() (*StreamingOpenResp, error) {
	m := new(StreamingOpenResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// SessionServer is the server API for Session service.
type SessionServer interface {
	StreamingOpen(Session_StreamingOpenServer) error
}

func RegisterSessionServer(s *grpc.Server, srv SessionServer) {
	s.RegisterService(&_Session_serviceDesc, srv)
}

func _Session_StreamingOpen_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(SessionServer).StreamingOpen(&sessionStreamingOpenServer{stream})
}

type Session_StreamingOpenServer interface {
	Send(*StreamingOpenResp) error
	Recv() (*StreamingOpenReq, error)
	grpc.ServerStream
}

type sessionStreamingOpenServer struct {
	grpc.ServerStream
}

func (x *sessionStreamingOpenServer) Send(m *StreamingOpenResp) error {
	return x.ServerStream.SendMsg(m)
}

func (x *sessionStreamingOpenServer) Recv() (*StreamingOpenReq, error) {
	m := new(StreamingOpenReq)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Session_serviceDesc = grpc.ServiceDesc{
	ServiceName: "cc.arduino.cli.debugger.Session",
	HandlerType: (*SessionServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamingOpen",
			Handler:       _Session_StreamingOpen_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "debugger/session.proto",
}
